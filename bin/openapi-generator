#!/usr/bin/env node

(async () => {

    const {spawn} = require('child_process');
    const {resolve, dirname, basename, extname} = require('path');
    const {existsSync} = require('fs');

    const args = process.argv.slice(2);
    const binPath = resolve(__dirname, 'openapi-generator.jar');
    const JAVA_OPTS = process.env['JAVA_OPTS'] || '';

    const baseCommand = `java ${JAVA_OPTS} -jar "${binPath}"`;

    const cfgFile = [
        args[0] && resolve(args[0]),
        args.length === 0 && resolve(process.env.INIT_CWD, 'package.json'),
    ]
        .filter(v => String(v).indexOf('.json') !== -1)
        .filter(existsSync)
        .pop()

    if (cfgFile) {

        const cfg = require(cfgFile)
        const glob = require('glob')
        const root = dirname(cfgFile)
        const globConfig = {cwd: root, absolute: false}
        const concurrently = require('concurrently');

        const buildCommand = ({relpath, ...b}) => {
            const path = resolve(globConfig.cwd, relpath)
            const ext = extname(path)
            const base = basename(path)
            const name = basename(path, extname(path))
            const dir = dirname(path)
            const reldir = dirname(relpath)

            const placeholders = {
                root,
                name,
                base,
                path,
                dir,
                reldir,
                relpath,
                ext: ext.split('.').slice(-1).pop(),
                Name: name.charAt(0).toUpperCase() + name.slice(1)
            }

            let command = Object.entries({
                ['input-spec']: path,
                ...b,
            }).map(([k, v]) => {

                if (typeof v === 'object') {
                    return `--${k}="${Object.entries(v).map(z => z.join('=')).join(',')}"`
                }

                return `--${k}="${v}"`

            }).join(' ')

            for (const [search, replacement] of Object.entries(placeholders)) {
                command = command.split(`#{${search}}`).join(replacement)
            }

            return `${baseCommand} generate ${command}`
        }

        const generatorConfig = cfg['openapi-generator'] || cfg
        const configurations = Object.entries(generatorConfig).reduce((acc, [globPattern, config]) => {

            const inputFiles = glob.sync(globPattern, globConfig)
            const commands = inputFiles
                .reduce((fAcc, relpath) => fAcc.concat(config.map((c) => ({relpath, ...c}))), [])
                .map(buildCommand)

            return [
                ...acc,
                ...commands,
            ]
        }, []).sort()

        return configurations.length > 0 && await concurrently(configurations)
            .then(() => console.log('Code generation successful'))
            .catch(() => {
                console.log('Code generation successful')
                process.exit(1)
            })

    }

    const cmd = spawn(
        `${baseCommand} ${args.join(' ')}`.trim(),
        {stdio: 'inherit', shell: true}
    );

    cmd.on('exit', process.exit);

})()
